// <auto-generated />
using System;
using Backend.Challenge.Infrastructure.Persistence.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Backend.Challenge.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DiscussaoDBContext))]
    [Migration("20211025200555_InitialSchema")]
    partial class InitialSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Backend.Challenge.Domain.Entities.ComentarioEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataInsercao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTimeOffset>("DataPublicacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EntidadeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.HasKey("Id");

                    b.HasIndex("EntidadeId");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("Backend.Challenge.Domain.Entities.EntidadeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataInsercao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TipoComentario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Entidades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06406200-c8ee-44e1-bf86-bc5827048705"),
                            DataInsercao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TipoComentario = "IDEIA"
                        },
                        new
                        {
                            Id = new Guid("21738160-0178-42c6-8b9e-c60f8fab459d"),
                            DataInsercao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TipoComentario = "SINAIS"
                        });
                });

            modelBuilder.Entity("Backend.Challenge.Domain.Entities.UtilizadorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataInsercao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Utilizadores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abea8a1e-d8e2-47f7-b7e7-6dd6cfe48ac4"),
                            DataInsercao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fake.nfsoares@gmail.com",
                            Username = "nfsoares"
                        },
                        new
                        {
                            Id = new Guid("2d4305a4-0481-4ced-85dc-2d2a09a99431"),
                            DataInsercao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fake.teste01@gmail.com",
                            Username = "teste01"
                        });
                });

            modelBuilder.Entity("ComentarioEntityUtilizadorEntity", b =>
                {
                    b.Property<Guid>("ComentariosVisualizadosId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UtilizadoresVisualizaramId")
                        .HasColumnType("uuid");

                    b.HasKey("ComentariosVisualizadosId", "UtilizadoresVisualizaramId");

                    b.HasIndex("UtilizadoresVisualizaramId");

                    b.ToTable("ComentarioEntityUtilizadorEntity");
                });

            modelBuilder.Entity("Backend.Challenge.Domain.Entities.ComentarioEntity", b =>
                {
                    b.HasOne("Backend.Challenge.Domain.Entities.EntidadeEntity", "Entidade")
                        .WithMany("Comentarios")
                        .HasForeignKey("EntidadeId")
                        .IsRequired();

                    b.Navigation("Entidade");
                });

            modelBuilder.Entity("ComentarioEntityUtilizadorEntity", b =>
                {
                    b.HasOne("Backend.Challenge.Domain.Entities.ComentarioEntity", null)
                        .WithMany()
                        .HasForeignKey("ComentariosVisualizadosId")
                        .IsRequired();

                    b.HasOne("Backend.Challenge.Domain.Entities.UtilizadorEntity", null)
                        .WithMany()
                        .HasForeignKey("UtilizadoresVisualizaramId")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Challenge.Domain.Entities.EntidadeEntity", b =>
                {
                    b.Navigation("Comentarios");
                });
#pragma warning restore 612, 618
        }
    }
}
