// <auto-generated />
using System;
using Backend.Challenge.Infrastructure.Persistence.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Backend.Challenge.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DiscussaoDBContext))]
    partial class DiscussaoDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Backend.Challenge.Domain.Entities.ComentarioEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DataInsercao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DataPublicacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EntidadeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.HasKey("Id");

                    b.HasIndex("EntidadeId");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("Backend.Challenge.Domain.Entities.EntidadeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DataInsercao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TipoComentario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UtilizadorEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UtilizadorEntityId");

                    b.ToTable("Entidades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5e9db95-4cac-44d7-9faa-d132140dfb2a"),
                            DataEdicao = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataInsercao = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TipoComentario = "IDEIA"
                        },
                        new
                        {
                            Id = new Guid("57819973-7eb4-4d19-87a0-c30b684a6546"),
                            DataEdicao = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataInsercao = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TipoComentario = "SINAIS"
                        });
                });

            modelBuilder.Entity("Backend.Challenge.Domain.Entities.UtilizadorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DataInsercao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Utilizadores");
                });

            modelBuilder.Entity("ComentarioEntityUtilizadorEntity", b =>
                {
                    b.Property<Guid>("ComentariosVisualizadosId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Visualizado_PorId")
                        .HasColumnType("uuid");

                    b.HasKey("ComentariosVisualizadosId", "Visualizado_PorId");

                    b.HasIndex("Visualizado_PorId");

                    b.ToTable("ComentarioEntityUtilizadorEntity");
                });

            modelBuilder.Entity("Backend.Challenge.Domain.Entities.ComentarioEntity", b =>
                {
                    b.HasOne("Backend.Challenge.Domain.Entities.EntidadeEntity", "Entidade")
                        .WithMany("Comentarios")
                        .HasForeignKey("EntidadeId")
                        .IsRequired();

                    b.Navigation("Entidade");
                });

            modelBuilder.Entity("Backend.Challenge.Domain.Entities.EntidadeEntity", b =>
                {
                    b.HasOne("Backend.Challenge.Domain.Entities.UtilizadorEntity", null)
                        .WithMany("Entidades")
                        .HasForeignKey("UtilizadorEntityId");
                });

            modelBuilder.Entity("ComentarioEntityUtilizadorEntity", b =>
                {
                    b.HasOne("Backend.Challenge.Domain.Entities.ComentarioEntity", null)
                        .WithMany()
                        .HasForeignKey("ComentariosVisualizadosId")
                        .IsRequired();

                    b.HasOne("Backend.Challenge.Domain.Entities.UtilizadorEntity", null)
                        .WithMany()
                        .HasForeignKey("Visualizado_PorId")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Challenge.Domain.Entities.EntidadeEntity", b =>
                {
                    b.Navigation("Comentarios");
                });

            modelBuilder.Entity("Backend.Challenge.Domain.Entities.UtilizadorEntity", b =>
                {
                    b.Navigation("Entidades");
                });
#pragma warning restore 612, 618
        }
    }
}
